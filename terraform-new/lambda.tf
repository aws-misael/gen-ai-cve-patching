# Lambda Permissions

resource "aws_iam_role" "lambda_execution_role" {
  name = "lambda_execution_role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [{
      Action = "sts:AssumeRole"
      Effect = "Allow"
      Principal = {
        Service = "lambda.amazonaws.com"
      }
    }]
  })
}

resource "aws_iam_policy" "dynamodb_write" {
  name        = "dynamodb_write_policy"
  description = "Policy for writing to DynamoDB table from Lambda"

  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [{
      Action = [
        "dynamodb:PutItem",
        "dynamodb:UpdateItem",
        "dynamodb:GetItem"
      ]
      Effect   = "Allow"
      Resource = aws_dynamodb_table.aggregate_cve_results.arn
    }]
  })
}

resource "aws_iam_role_policy_attachment" "dynamodb_write_attach" {
  role       = aws_iam_role.lambda_execution_role.name
  policy_arn = aws_iam_policy.dynamodb_write.arn
}

# Lambda Function aggregate inspector data into DynamoDB
resource "aws_lambda_function" "aggregate_cve_lambda" {
  function_name = "AggregateCVEFunction"
  handler       = "lambda_function.lambda_handler" # Update based on your Lambda's programming language and entry point
  role          = aws_iam_role.lambda_execution_role.arn
  timeout       = 300
  runtime       = "python3.9" # Update based on your Lambda's runtime environment

  # Assuming you have the Lambda code in a local file named "lambda_function_payload.zip"
  filename = var.lambda_file_name
}

# Lambda Function to trigger ECS service
# Lambda IAM Role
resource "aws_iam_role" "lambda_role" {
  name = "lambda_execution_role_trigger"

  assume_role_policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Action = "sts:AssumeRole",
        Effect = "Allow",
        Principal = {
          Service = "lambda.amazonaws.com"
        }
      }
    ]
  })
}

# Lambda IAM Role Policy
resource "aws_iam_role_policy" "lambda_policy" {
  name = "lambda_policy"
  role = aws_iam_role.lambda_role.id

  policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Action = [
          "logs:CreateLogGroup",
          "logs:CreateLogStream",
          "logs:PutLogEvents"
          # Add additional permissions as needed
        ],
        Effect   = "Allow",
        Resource = "arn:aws:logs:*:*:*"
      }
    ]
  })
}

# Lambda Layer
resource "aws_lambda_layer_version" "lambda_layer" {
  filename   = var.lambda_layer # Update this with the actual path to your Lambda Layer ZIP file
  layer_name = "python_requests_layer"

  compatible_runtimes = ["python3.9"]
}

# Lambda Function, TBD: Could be place within the VPC and the app LB could be private
resource "aws_lambda_function" "lambda_function_trigger_ecs" {
  function_name = "TriggerECSGenAiService"
  role          = aws_iam_role.lambda_role.arn
  handler       = "lambda_function.lambda_handler"
  runtime       = "python3.9"
  filename      = var.lambda_file_name_trigger_ecs
  timeout       = 300
  layers = [
    aws_lambda_layer_version.lambda_layer.arn
  ]

  environment {
    variables = {
      ECS_SERVICE_API = "http://${module.alb.dns_name}" # Update this with the actual endpoint
      # Add any additional environment variables here
    }
  }
}
