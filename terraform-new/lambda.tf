# Lambda Permissions

resource "aws_iam_role" "lambda_execution_role" {
  name = "lambda_execution_role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [{
      Action = "sts:AssumeRole"
      Effect = "Allow"
      Principal = {
        Service = "lambda.amazonaws.com"
      }
    }]
  })
}

resource "aws_iam_policy" "dynamodb_write" {
  name        = "dynamodb_write_policy"
  description = "Policy for writing to DynamoDB table from Lambda"

  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [{
      Action = [
        "dynamodb:PutItem",
        "dynamodb:UpdateItem",
        "dynamodb:GetItem"
      ]
      Effect   = "Allow"
      Resource = aws_dynamodb_table.aggregate_cve_results.arn
    }]
  })
}

resource "aws_iam_role_policy_attachment" "dynamodb_write_attach" {
  role       = aws_iam_role.lambda_execution_role.name
  policy_arn = aws_iam_policy.dynamodb_write.arn
}

# Lambda Function
resource "aws_lambda_function" "aggregate_cve_lambda" {
  function_name = "AggregateCVEFunction"
  handler       = "lambda_function.lambda_handler" # Update based on your Lambda's programming language and entry point
  role          = aws_iam_role.lambda_execution_role.arn

  runtime = "python3.9" # Update based on your Lambda's runtime environment

  # Assuming you have the Lambda code in a local file named "lambda_function_payload.zip"
  filename = var.lambda_file_name
}


