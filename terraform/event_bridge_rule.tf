# Event-Bridge rule for Inspector to trigger aggregate data Lambda Function
resource "aws_cloudwatch_event_rule" "ecr_scan_complete" {
  name        = "ecr-scan-complete-rule"
  description = "Triggers for HIGH and CRITICAL severity findings from Inspector2."

  event_pattern = jsonencode({
    source        = ["aws.inspector2"],
    "detail-type" = ["Inspector2 Finding"],
    detail = {
      severity = ["HIGH", "CRITICAL", "MEDIUM"] # Can modify based on needs
    }
  })
}

resource "aws_cloudwatch_event_target" "invoke_lambda" {
  rule = aws_cloudwatch_event_rule.ecr_scan_complete.name
  arn  = aws_lambda_function.aggregate_cve_lambda.arn
}

resource "aws_lambda_permission" "allow_event_bridge" {
  statement_id  = "AllowExecutionFromEventBridge"
  action        = "lambda:InvokeFunction"
  function_name = aws_lambda_function.aggregate_cve_lambda.function_name
  principal     = "events.amazonaws.com"
  source_arn    = aws_cloudwatch_event_rule.ecr_scan_complete.arn
}

# Event-Bridge rule for Initial Scan Complete, to trigger Lambda function that will trigger ECS app
resource "aws_cloudwatch_event_rule" "inspector_findings_complete" {
  name        = "inspector-findings-complete"
  description = "Trigger when Inspector2 scan is complete and findings are available."

  event_pattern = jsonencode({
    "source" : ["aws.inspector2"],
    "detail-type" : ["Inspector2 Scan"],
    "detail" : {
      "scan-status" : ["INITIAL_SCAN_COMPLETE"],
    }
  })
}

resource "aws_cloudwatch_event_target" "invoke_lambda_trigger_bedrock" {
  rule = aws_cloudwatch_event_rule.inspector_findings_complete.name
  arn  = aws_lambda_function.lambda_function_trigger_ecs.arn
}

resource "aws_lambda_permission" "allow_event_bridge_trigger_lambda" {
  statement_id  = "AllowExecutionFromEventBridge"
  action        = "lambda:InvokeFunction"
  function_name = aws_lambda_function.lambda_function_trigger_ecs.function_name
  principal     = "events.amazonaws.com"
  source_arn    = aws_cloudwatch_event_rule.inspector_findings_complete.arn
}